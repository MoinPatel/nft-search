{"version":3,"sources":["componennts/card/card-component.jsx","componennts/card-list/card-list.component.jsx","componennts/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filterdMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHbC,EAAW,SAAAR,GACpB,OAAQ,qBAAKC,UAAU,YAAf,SACHD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCHhBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAErB,uBAAOZ,UAAU,SACjBa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC4BCG,G,wDA/Bb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXR,SAAS,GACTS,YAAa,IAJJ,E,qDAOb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,S,oBAE1C,WAAU,IAAD,OACP,EAAiCE,KAAKR,MAA9BR,EAAR,EAAQA,SAAUS,EAAlB,EAAkBA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC9CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAElD,OACE,sBAAK3B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAE3D,uBACA,cAAC,EAAD,CAAUvB,SAAUiB,W,GA1BVO,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.720f2cb0.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set7&size=180x180`} />   \n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n);","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card-component';\n\nexport const CardList = props => {\n    return (<div className='card-list'>\n        {props.monsters.map(monster => (\n          <Card key={monster.id} monster={monster} />\n        ))}\n    </div>)\n}\n","import React from 'react';\nimport './search-box.styles.css';\n\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n\n    <input className=\"search\"\n    type='search' \n    placeholder={placeholder}\n    onChange={handleChange}\n    />\n    );","import React, { Component } from 'react';\nimport { CardList } from './componennts/card-list/card-list.component';\nimport { SearchBox } from './componennts/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters:[],\n      searchField: ''\n    };\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n  render() {\n    const { monsters, searchField} = this.state;\n    const filterdMonsters =  monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return (\n      <div className='App'>\n        <h1>Monster Rolodex</h1>\n        <SearchBox \n          placeholder='serach monsters'\n          handleChange={e => this.setState({ searchField: e.target.value })}\n        />\n        <br></br>\n        <CardList monsters={filterdMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}